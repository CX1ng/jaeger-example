// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jaeger_test.proto

/*
Package jaeger_test is a generated protocol buffer package.

It is generated from these files:
	jaeger_test.proto

It has these top-level messages:
	Req
	Resp
*/
package jaeger_test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Req) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Resp struct {
	Resp string `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Resp) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

func init() {
	proto.RegisterType((*Req)(nil), "jaeger_test.Req")
	proto.RegisterType((*Resp)(nil), "jaeger_test.Resp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Jaeger service

type JaegerClient interface {
	SendMsg(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type jaegerClient struct {
	cc *grpc.ClientConn
}

func NewJaegerClient(cc *grpc.ClientConn) JaegerClient {
	return &jaegerClient{cc}
}

func (c *jaegerClient) SendMsg(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := grpc.Invoke(ctx, "/jaeger_test.Jaeger/SendMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Jaeger service

type JaegerServer interface {
	SendMsg(context.Context, *Req) (*Resp, error)
}

func RegisterJaegerServer(s *grpc.Server, srv JaegerServer) {
	s.RegisterService(&_Jaeger_serviceDesc, srv)
}

func _Jaeger_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JaegerServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger_test.Jaeger/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JaegerServer).SendMsg(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jaeger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger_test.Jaeger",
	HandlerType: (*JaegerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _Jaeger_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jaeger_test.proto",
}

func init() { proto.RegisterFile("jaeger_test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x4a, 0x4c, 0x4d,
	0x4f, 0x2d, 0x8a, 0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0x12, 0xe7, 0x62, 0x0e, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0xa4, 0xb8, 0x58, 0x82, 0x52, 0x8b, 0x0b,
	0x84, 0x84, 0xb8, 0x58, 0x8a, 0x52, 0x8b, 0x0b, 0xa0, 0x52, 0x60, 0xb6, 0x91, 0x05, 0x17, 0x9b,
	0x17, 0xd8, 0x0c, 0x21, 0x3d, 0x2e, 0xf6, 0xe0, 0xd4, 0xbc, 0x14, 0xdf, 0xe2, 0x74, 0x21, 0x01,
	0x3d, 0x64, 0xab, 0x82, 0x52, 0x0b, 0xa5, 0x04, 0xd1, 0x44, 0x8a, 0x0b, 0x92, 0xd8, 0xc0, 0x4e,
	0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x67, 0x41, 0x09, 0x97, 0x00, 0x00, 0x00,
}
